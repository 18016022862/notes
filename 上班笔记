手机浏览器打开微信：href="javascript:window.location.href='weixin://'"
微信公众号api：http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html

css currentColor:是 color 属性的值，具体意思是指：currentColor关键字的使用值是 color 属性值的计算值。

css 动态加载效果demo：
<style type="text/css">
        .btn {
            display: inline-block;
            padding: 0.25em 1.25em;
            border: 1px solid;
            border-radius: 2px;
            vertical-align: bottom;
            font-weight: inherit;
            border-color: #208000 #1F7F00;
            background-color: #289600;
            box-shadow: inset 0 0 1px rgba(255,255,255,.6), 0 1px #8DBF62;
            color: #fff;
            text-shadow: 0 -1px #137900;
        }
        .doted {
            display: inline-block;
            min-width: 2px;
            min-height: 2px;
            background-clip: content-box;
            box-shadow: 2px 0 currentColor, 6px 0 currentColor, 10px 0 currentColor; 
            animation: dot 4s infinite step-start both;
            *zoom: expression(this.innerHtml='...');/*兼容IE7*/
        }

            .doted:before {
                content: '...';
            }

            .doted::before {
                content: '';
            }

        :root .doted {
            margin-right: 8px;
        }

        @-webkit-keyframes dot {
            25% {
                box-shadow: none;
            }

            50% {
                box-shadow: 2px 0 currentColor;
            }

            75% {
                box-shadow: 2px 0 currentColor, 6px 0 currentColor;
            }
        }

        @keyframes dot {
            25% {
                box-shadow: none;
            }

            50% {
                box-shadow: 2px 0 currentColor;
            }

            75% {
                box-shadow: 2px 0 currentColor, 6px 0 currentColor;
            }
        }
    </style>

px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。

em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。

为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。

document.getElementById('div').innerText = '哈哈';

canvas 制作小球弹跳 仿自由落体 

1.关键字：requestAnimationFrame 

这个方法原理其实也就跟setTimeout/setInterval差不多，通过递归调用同一方法来不断更新画面以达到动起来的效果，但它优于setTimeout/setInterval的地方在于它是由浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状
态下的话，动画会自动暂停，有效节省了CPU开销。

2.调用方法：requestAnimationFrame(callback)//callback为回调函数

3.demo演示

//小球弹跳
var cv = document.getElementById("canvas");
var ctx = cv.getContext("2d");
var turnCount = 0;
var handle;
var img = new Image();
img.src = '{{path}}/images/page/38day/tlms.png';//填充的图片路径
var ball = {
            x: 200 - img.width / 2,//初始横坐标
            y: 0,              //初始纵坐标
            g: 0.25,           //重力加速度
            vy: 0,             //水平速度
            count: 5,           //弹跳次数
            draw: function () {
                ctx.beginPath();
                ctx.drawImage(img, this.x, this.y);
                ctx.closePath();
            }
        };
 //小球下落逻辑
        function draw() {
            ctx.clearRect(0, 0, cv.width, cv.height);
            ball.draw();
            ball.y += ball.vy; //计算小球下落的y轴距离
            ball.vy += ball.g; //计算小球下落的速度
            if (ball.y >= cv.height - img.height) {//小球下落的y轴距离大于等于画布的长度减去当前小球的宽度，说明此时小球刚刚碰到地面，忽略地面陷入。
                ball.y = cv.height - img.height;//重新计算小球的y轴距离
                ball.vy = -ball.vy * 0.5;       //模拟反弹效果，小球速度应该是慢慢减少
                turnCount++;                    //记录小球反弹的次数
            }
            if (turnCount > ball.count) {
                return;
            }
            handle = window.requestAnimationFrame(draw);
            //或者requestAnimationFrame(draw);
        }

4.兼容各个浏览器代码：
 //兼容各个浏览器逻辑
        function Api() {
            var lastTime = 0;
            var prefixes = 'webkit moz ms o'.split(' '); //各浏览器前缀

            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;

            var prefix;
            //通过遍历各浏览器前缀，来得到requestAnimationFrame和cancelAnimationFrame在当前浏览器的实现形式
            for (var i = 0; i < prefixes.length; i++) {
                if (requestAnimationFrame && cancelAnimationFrame) {
                    break;
                }
                prefix = prefixes[i];
                requestAnimationFrame = requestAnimationFrame || window[prefix + 'RequestAnimationFrame'];
                cancelAnimationFrame = cancelAnimationFrame || window[prefix + 'CancelAnimationFrame'] || window[prefix + 'CancelRequestAnimationFrame'];
            }

            //如果当前浏览器不支持requestAnimationFrame和cancelAnimationFrame，则会退到setTimeout
            if (!requestAnimationFrame || !cancelAnimationFrame) {
                requestAnimationFrame = function (callback, element) {
                    var currTime = new Date().getTime();
                    //为了使setTimteout的尽可能的接近每秒60帧的效果
                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                    var id = window.setTimeout(function () {
                        callback(currTime + timeToCall);
                    }, timeToCall);
                    lastTime = currTime + timeToCall;
                    return id;
                };

                cancelAnimationFrame = function (id) {
                    window.clearTimeout(id);
                };
            }

            //得到兼容各浏览器的API
            window.requestAnimationFrame = requestAnimationFrame;
            window.cancelAnimationFrame = cancelAnimationFrame;

            draw();
        }


在页面添加location.hash可实现无论哪个页面跳到该页面都跳到固定位置。
<script language="javascript">  
        location.hash="#navBar";  //指定锚点
</script>
//图片加载
function preImage(url, callback) {
                var img = new Image(); //创建一个Image对象，实现图片的预下载  
                img.src = url;

                if (img.complete) { // 如果图片已经存在于浏览器缓存，直接调用回调函数  
                    callback(img);
                    return; // 直接返回，不用再处理onload事件  
                }

                img.onload = function () { //图片下载完毕时异步调用callback函数。  
                    callback(img);//将回调函数的this替换为Image对象  
                };
            }
原型链
   JS在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做__proto__的内置属性，用于指向创建它的函数对象的原型对象prototype

sublime2 加入汉化包：运行软件，依次点击菜单Preferneces -> Browse Packages ，在打开的目录的父目录中有一个Packages，
把下载下来的压缩包中的Default文件夹放到那里面就可以了。

//创建正则表达式：参考http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp
var reg = new RegExp(/^([a-z]+)\s([0-9]{4})$/);
reg.test(/**/);

各种css3按钮效果：http://www.shejidaren.com/css-hover-style.html


空格：$('parent childchild')表示获取parent下的所有的childchild节点（所有的子孙）。

大于号：$('parent > child')表示获取parent下的所有child的儿子( 第一代)。

加号：$('pre + nextbrother')表示获得pre节点的下一个兄弟节点，相当于next()方法

波浪号：$('pre ~ brother')表示获取pre节点的后面的所有兄弟节点，相当于nextAll()方法。


post、get的区别
→ get的参数会显示在浏览器地址栏中，而post的参数不会显示在浏览器地址栏中；
→ 使用post提交的页面在点击【刷新】按钮的时候浏览器一般会提示“是否重新提交”，而get则不会；
→ 用get的页面可以被搜索引擎抓取，而用post的则不可以；
→ 用post可以提交的数据量非常大，而用get可以提交的数据量则非常小(2k)，受限于网页地址的长度。
→ 用post可以进行文件的提交，而用get则不可以。

Application 、Cookie和 Session 两种会话有什么不同？
→ Application是用来存取整个网站全局的信息，而Session是用来存取与具体某个访问者关联的信息。Cookie是保存在客户端的，机密信息不能保存在Cookie中，只能放小数据；
Session是保存在服务器端的，比较安全，可以放大数据。
→ 谈到Session的时候就侃Session和Cookie的关系：Cookie中的SessionId。客户第一次发送请求给服务器，此时服务器产生一个唯一的sessionID，并返回给客户端(通过cookie)

面向对象语言的四大特征是：抽象、封装、继承和多态.

而重写和重载是多态的两种表现形式。

重载是方法名相同,而参数不是一定要相同如:
public void test()  
public void test(string x) 
这样的形式叫重载，重载的意义在于<扩展父类的功能>，
如果有两个类A和B，继承C,那么在C的方法只需要定义A和B相同的功能，而在各个子类中扩展子类具体的实现。

原理：
重写是发生在父类与子类之间的关系。
具体来讲就是子类可以重写父类的现有的方法。
它要求子类的方法名称及参数必须与父类完全一致。

派生类中要被C#方法重写是用 virtual 修饰符声明的。
而在派生类中，已被C#方法重写用 override 修饰符声明。

重写属性声明必须指定与继承属性完全相同的访问修饰符、类型和名称，并且被重写的属性必须是 virtual、abstract 或 override 的。
您不能使用 new、static 或 virtual 修饰符来修改 override 方法。
要扩展或修改继承的方法、属性、索引器或事件的抽象实现或虚实现，必须使用 override 修饰符。

委托可以把一个方法作为参数代入另一个方法。
委托可以理解为指向一个函数的引用。

装箱在值类型向引用类型转换时发生，值类型是要放在栈上的
拆箱在引用类型向值类型转换时发生，引用类型需要放在堆上
Class可以被实例化,属于引用类型,是分配在内存的堆上的,Struct属于值类型,是分配在内存的栈上的.

net中读写数据库需要用到那些类？

DataSet:数据存储器。
DataCommand:执行语句命令。
DataAdapter:数据的集合，用语填充。

ASP.NET的身份验证方式有哪些？
[Forms 身份验证] 通过其可将没有通过身份验证的请求重定向到使用 HTTP 客户端重定向的 HTML 窗体的系统。用户提供凭据并提交该窗体。如果应用程序验证该请求，系统就会发出包含凭据或密钥的 Cookie 以重新获取该标识。
后续的请求在请求标题中随 Cookie 一起发出，ASP.NET 事件处理程序会使用应用程序开发人员指定的任何验证方法去验证请求并给其授权。 

[Passport 身份验证] 由 Microsoft 提供的集中身份验证服务，用于为成员站点提供单一登录和核心配置服务。

[Windows 身份验证] ASP.NET 会结合 Internet 信息服务 (IIS) 身份验证使用 Windows 身份验证。
IIS 以下列三种方式执行身份验证：基本身份验证、摘要式身份验证或集成 Windows 身份验证。
当 IIS 身份验证完成后，ASP.NET 会使用验证过的标识授权访问权限。


微软.NET 构架下remoting和webservice两项技术：WS主要是可利用HTTP，穿透防火墙。而Remoting可以利用TCP/IP，二进制传送提高效率。

能用foreach遍历访问的对象需要实现IEnumerable接口或声明 GetEnumerator方法的类型。
ienumerator strenum = str.getenumerator();
while(streunm.movenext())
{
    console.write(str.current);//这样可以将字符串，按一个个字符输出
}

String s = new String("xyz");创建了几个String Object? 两个对象，一个是“xyx”,一个是指向“xyx”的引用对象s。

如何处理几十万条并发数据？

答：用存储过程或事务。取得最大标识的时候同时更新..注意主键不是自增量方
式这种方法并发的时候是不会有重复主键的..取得最大标识要有一个存储过程来
获取.

进程和线程的区别？

答：进程是系统进行资源分配和调度的单位；线程是CPU调度和分派的单位，一个
进程可以有多个线程，这些线程共享这个进程的资源。

堆和栈的区别？

答： 栈：由编译器自动分配、释放。在函数体中定义的变量通常在栈上。
堆：一般由程序员分配释放。用new、malloc等分配内存函数分配得到的就是在堆
上。

session(viewstate) 简单，但易丢失
iis中由于有进程回收机制，系统繁忙的话Session会丢失，可以用Sate Server或SQL Server数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的END事件。
application 全局
cookie 简单，但可能不支持，可能被伪造
input type="hidden" 简单，可能被伪造
url参数 简单，显示于地址栏，长度有限

.net Struct(结构)和Class(类)区别：
Struct(结构)：属于值类型，值类型是在堆栈上面分配内存，所以所有的基类型（值类型）都是结构类型。
类是引用类型：引用类型在堆上分配地址。
（*值类型：）

String是固定不变的，在进行字符串连接的时候是新建一个字符串，进行连接后，最后赋值，
如果对String赋值多次，就会在内存中保存多个这个对象的副本，浪费系统资源

StringBuilder是可变的，不用生成中间对象，拼接字符串比较多，或字符串的长度比较长时有较高的效率。
StringBuilder的内存空间不够也要扩容，如果分配的空间远远大于需要量，也很浪费
所以，初始化StringBuilder的时候最好根据需要设置容量，避免浪费

http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651550895&idx=1&sn=d1821187aac86f547af19da75f6c2c29&scene=0#wechat_redirect 前端css技术。
=======
SQL SREVER中向一个表中插入了新数据，如何快捷的得到自增量字段的当前值：
INSERT INTO jobs (job_desc,min_lvl,max_lvl) VALUES ('Accountant',12,125) SELECT @@IDENTITY AS 'Identity'

1．存储过程是一段预先编译好的T-SQL代码,可以被重复调用,触发器是在进行表更改操作时才执行功能． 2．触发器执行的时间较长,性能较低;存储过程重用性好,执行性能较高． 3．触发器多用在完善表的数据完整性和约束;存储过程多用在方便重复使用数据库操作．

IRequiresSessionState接口：标记程序中是否可以使用session；
http（超文本传输协议）是一个基于请求与响应模式的、无状态的、应用层的协议，常基于TCP的连接方式

C# 使用SqlBulkCopy类批量复制大数据,将内存中的数据表直接的一次性的存储到数据库中